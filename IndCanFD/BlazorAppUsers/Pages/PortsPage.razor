@page "/Ports"
@inject IConfigApplication _configApp
@inject NavigationManager NavigationManager
@using Config
@using global::Config


<h3>Manage Ports</h3>

<!-- Display existing ports in a table -->
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Data</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var port in viewPorts)
    {
        <tr>
            <td>@port.ID</td>
            <td>@port.Data</td>
            <td>
                <button class="btn btn-primary" @onclick="(() => EditPort(port))">Edit</button>
                <button class="btn btn-danger" @onclick="(() => DeletePort(port.ID).ConfigureAwait(false))">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

<!-- Form for adding/updating a port -->
<h4>@(editingPort == null ? "Add New Port" : $"Editing Port {editingPort.ID}")</h4>
<EditForm Model="editingPort" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="id">ID</label>
        <InputNumber id="id" class="form-control" @bind-Value="editingPort.ID" />
    </div>

    <div class="form-group">
        <label for="data">Data</label>
        <InputText id="data" class="form-control" @bind-Value="editingPort.Data" />
    </div>

    <button type="submit" class="btn btn-success">Submit</button>
    <button type="reset" class="btn btn-secondary" @onclick="ResetForm">Reset</button>
</EditForm>

@code {
    private List<Port> viewPorts = new();
    private Port editingPort = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPorts();
    }

    private async Task LoadPorts()
    {
        viewPorts = await _configApp.GetAllPorts(); 
    }

    private void EditPort(Port port)
    {
        editingPort = port;
    }

    private async Task HandleValidSubmit()
    {
        if (editingPort.ID == 0)
        {
            // Add new port
            await _configApp.AddPort(editingPort); 
        }
        else
        {
            // Update existing port
            await _configApp.UpdatePort(editingPort); 
        }

        // Reset form and reload ports
        ResetForm();
        await LoadPorts();
    }

    private void ResetForm()
    {
        editingPort = new Port();
    }

    private async Task DeletePort(int id)
    {
        await _configApp.DeletePort(id); 
        await LoadPorts();
    }
}
