@page "/"
@page "/configs"

@using Config
@inject IConfigApplication ConfigApplication

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>




<h3>Configs</h3>

<button @onclick="AddConfig">Add Config</button>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Data</th>
            <th>DateTime</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var config in configs)
        {
            <tr>
                <td>@config.ID</td>
                <td>@config.Data</td>
                <td>@config.DateTime</td>
                <td>
                    <button @onclick="() => DeleteConfig(config.ID)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Add Config Modal -->
@if (isAddConfigModalOpen)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal show" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Config</h5>
                    <button type="button" class="close" @onclick="CloseAddConfigModal">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="text" @bind="newConfigData" placeholder="Enter Config Data" class="form-control" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="SubmitNewConfig">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddConfigModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ConfigData> configs = new();
    private bool isAddConfigModalOpen;
    private string newConfigData;

    protected override async Task OnInitializedAsync()
    {
        configs = (await ConfigApplication.DumpListAllData());
    }

    private void AddConfig()
    {
        isAddConfigModalOpen = true;
    }

    private void CloseAddConfigModal()
    {
        isAddConfigModalOpen = false;
    }

    private async Task SubmitNewConfig()
    {
        await ConfigApplication.WriteConfigData(configs.Count + 1, newConfigData);
        configs = (await ConfigApplication.DumpListAllData());
        isAddConfigModalOpen = false;
    }

    private async Task DeleteConfig(int id)
    {
        await ConfigApplication.ResetConfigData(id);
        configs = (await ConfigApplication.DumpListAllData());
    }
}
